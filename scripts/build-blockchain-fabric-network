echo
echo "Build Blockchain Fabric Network Part 1" 
echo "Step 4 - Prepare the Fabric client node and enroll an identity"
echo

echo
echo "Step 4a - Get the latest non-profit-blockchain repo"
echo

cd ~
git clone https://github.com/aws-samples/non-profit-blockchain.git

echo
echo "Step 4b - Update and source the fabric-exports.sh"
echo

cd ~/non-profit-blockchain/ngo-fabric
cp ~/aws-blockchain-fabric-quickstart/scripts/fabric-exports.sh.txt fabric-exports.sh.txt

sed "s|<your network name>|${NETWORKNAME}|; \
     s|<the member name you entered when creating your Fabric network>|${MEMBERNAME}|; \
     s|<the admin user name you entered when creating your Fabric network>|${ADMINUSER}|; \
     s|<the admin password you entered when creating your Fabric network>|${ADMINPWD}|; \
     s|<your network ID, from the AWS Console>|${NETWORKID}|; \
     s|<your member ID, from the AWS Console>|${MEMBERID}|" \
     fabric-exports.sh.txt > fabric-exports.sh
     
source fabric-exports.sh
echo $PEERSERVICEENDPOINT
echo;sleep 25

echo
echo "Step 4c - Check the peer export file exists and that it contains a number of export keys with values:"
echo

cat ~/peer-exports.sh 
source ~/peer-exports.sh
echo;sleep 25

echo 
echo "Step 4d - Get the latest version of the Managed Blockchain PEM file."
echo 

aws s3 cp s3://us-east-1.managedblockchain/etc/managedblockchain-tls-chain.pem  /home/ec2-user/managedblockchain-tls-chain.pem  
echo;sleep 25

echo 
echo "Step 4e - Enroll an admin identity with the Fabric CA"
echo 

export PATH=$PATH:/home/ec2-user/go/src/github.com/hyperledger/fabric-ca/bin
cd ~
fabric-ca-client enroll -u https://$ADMINUSER:$ADMINPWD@$CASERVICEENDPOINT --tls.certfiles /home/ec2-user/managedblockchain-tls-chain.pem -M /home/ec2-user/admin-msp 
echo;sleep 25 

echo
echo "Step 4f - Some final copying of the certificates is necessary:"
echo

mkdir -p /home/ec2-user/admin-msp/admincerts
cp ~/admin-msp/signcerts/* ~/admin-msp/admincerts/
cd ~/non-profit-blockchain/ngo-fabric
echo;sleep 25

echo
echo "Step 5 - Update the configtx channel configuration"
echo "Obtain member ID from ENV variables exported to your current session."
echo 

echo $MEMBERID

echo 
echo "Step 5a - Update the configtx.yaml file"
echo

cp ~/non-profit-blockchain/ngo-fabric/configtx.yaml ~/configtx.yaml.txt
sed "s|<REPLACE WITH MEMBER_ID>|${MEMBERID}|" ~/configtx.yaml.txt > ~/configtx.yaml
echo;sleep 25

echo
echo "Step 5b - Generate the configtx channel configuration by executing the following script. When the channel is created,"
echo "this channel configuration will become the genesis block i.e. block 0 on the channel"
echo

docker exec cli configtxgen -outputCreateChannelTx /opt/home/$CHANNEL.pb -profile OneOrgChannel -channelID $CHANNEL --configPath /opt/home/
ls ~/$CHANNEL.pb 
echo;sleep 25

echo
echo "Step 6 - Create a Fabric channel"
echo

echo
echo "Step 6a - On the Fabric client node.  Create a Fabric channel.  Execute the following script:"
echo

docker exec -e "CORE_PEER_TLS_ENABLED=true" -e "CORE_PEER_TLS_ROOTCERT_FILE=/opt/home/managedblockchain-tls-chain.pem" \
    -e "CORE_PEER_ADDRESS=$PEER" -e "CORE_PEER_LOCALMSPID=$MSP" -e "CORE_PEER_MSPCONFIGPATH=$MSP_PATH" \
    cli peer channel create -c $CHANNEL -f /opt/home/$CHANNEL.pb -o $ORDERER --cafile $CAFILE --tls --timeout 900s
ls /home/ec2-user/fabric-samples/chaincode/hyperledger/fabric/peer
echo;sleep 25 

echo
echo "Step 6b - If the channel creation times out, it's possible that the channel has still been created and you can get the block"
echo "from the channel itself.  Executing the command below will read the channel config and save the genesis block in the same"
echo "directory as mentioned above"
echo

docker exec -e "CORE_PEER_TLS_ENABLED=true" -e "CORE_PEER_TLS_ROOTCERT_FILE=/opt/home/managedblockchain-tls-chain.pem" \
    -e "CORE_PEER_ADDRESS=$PEER"  -e "CORE_PEER_LOCALMSPID=$MSP" -e "CORE_PEER_MSPCONFIGPATH=$MSP_PATH" \
    cli peer channel fetch oldest /opt/home/fabric-samples/chaincode/hyperledger/fabric/peer/$CHANNEL.block \
    -c $CHANNEL -o $ORDERER --cafile /opt/home/managedblockchain-tls-chain.pem --tls   
ls /home/ec2-user/fabric-samples/chaincode/hyperledger/fabric/peer
echo;sleep 25

echo
echo "Step 7 - Join your peer node to the channel"
echo 

docker exec -e "CORE_PEER_TLS_ENABLED=true" -e "CORE_PEER_TLS_ROOTCERT_FILE=/opt/home/managedblockchain-tls-chain.pem" \
    -e "CORE_PEER_ADDRESS=$PEER" -e "CORE_PEER_LOCALMSPID=$MSP" -e "CORE_PEER_MSPCONFIGPATH=$MSP_PATH" \
    cli peer channel join -b $CHANNEL.block  -o $ORDERER --cafile $CAFILE --tls
echo;sleep 25

echo
echo "Step 8 - Install chaincode on your peer node"
echo

docker exec -e "CORE_PEER_TLS_ENABLED=true" -e "CORE_PEER_TLS_ROOTCERT_FILE=/opt/home/managedblockchain-tls-chain.pem" \
    -e "CORE_PEER_ADDRESS=$PEER" -e "CORE_PEER_LOCALMSPID=$MSP" -e "CORE_PEER_MSPCONFIGPATH=$MSP_PATH" \
    cli peer chaincode install -n $CHAINCODENAME -v $CHAINCODEVERSION -p $CHAINCODEDIR
echo;sleep 25

echo
echo "Step 9 - Instantiate the chaincode on the channel"
echo 

docker exec -e "CORE_PEER_TLS_ENABLED=true" -e "CORE_PEER_TLS_ROOTCERT_FILE=/opt/home/managedblockchain-tls-chain.pem" \
    -e "CORE_PEER_ADDRESS=$PEER" -e "CORE_PEER_LOCALMSPID=$MSP" -e "CORE_PEER_MSPCONFIGPATH=$MSP_PATH" \
    cli peer chaincode instantiate -o $ORDERER -C $CHANNEL -n $CHAINCODENAME -v $CHAINCODEVERSION \
    -c '{"Args":["init","a","100","b","200"]}' --cafile $CAFILE --tls
echo;sleep 25

echo
echo "Step 10 - Query the chaincode"
echo 

docker exec -e "CORE_PEER_TLS_ENABLED=true" -e "CORE_PEER_TLS_ROOTCERT_FILE=/opt/home/managedblockchain-tls-chain.pem" \
    -e "CORE_PEER_ADDRESS=$PEER" -e "CORE_PEER_LOCALMSPID=$MSP" -e "CORE_PEER_MSPCONFIGPATH=$MSP_PATH" \
    cli peer chaincode query -C $CHANNEL -n $CHAINCODENAME -c '{"Args":["query","a"]}' 
echo;sleep 25

echo
echo "Step 11 - Invoke a transaction"
echo 

docker exec -e "CORE_PEER_TLS_ENABLED=true" -e "CORE_PEER_TLS_ROOTCERT_FILE=/opt/home/managedblockchain-tls-chain.pem" \
    -e "CORE_PEER_ADDRESS=$PEER" -e "CORE_PEER_LOCALMSPID=$MSP" -e "CORE_PEER_MSPCONFIGPATH=$MSP_PATH" \
    cli peer chaincode invoke -o $ORDERER -C $CHANNEL -n $CHAINCODENAME \
    -c '{"Args":["invoke","a","b","10"]}' --cafile $CAFILE --tls
echo;sleep 25

echo
echo "Step 12 - Query the chaincode again and check the change in value"
echo 

docker exec -e "CORE_PEER_TLS_ENABLED=true" -e "CORE_PEER_TLS_ROOTCERT_FILE=/opt/home/managedblockchain-tls-chain.pem" \
    -e "CORE_PEER_ADDRESS=$PEER" -e "CORE_PEER_LOCALMSPID=$MSP" -e "CORE_PEER_MSPCONFIGPATH=$MSP_PATH" \
    cli peer chaincode query -C $CHANNEL -n $CHAINCODENAME -c '{"Args":["query","a"]}' 
